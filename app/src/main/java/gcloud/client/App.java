/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gcloud.client;

import com.google.auth.oauth2.AccessToken;
import com.google.auth.oauth2.GoogleCredentials;

import java.io.FileInputStream;

import com.google.cloud.shell.v1.CloudShellServiceClient;
import com.google.cloud.shell.v1.CloudShellServiceSettings;
import com.google.cloud.shell.v1.StartEnvironmentRequest;
import com.google.cloud.shell.v1.StartEnvironmentResponse;
import com.google.cloud.shell.v1.Environment;

import java.util.List;
import java.util.Arrays;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;

import java.io.StringReader;

public class App {
    public String getGreeting() {
        return "Hallo";
    }
    
    private String getAccessToken() {
		try {
			GoogleCredentials credentials = GoogleCredentials.fromStream(new
			FileInputStream(System.getProperty("GOOGLE_APPLICATION_CREDENTIALS",
    "")));
			credentials.refreshIfExpired();
			AccessToken token = credentials.getAccessToken();
			// OR
			//AccessToken token = credentials.refreshAccessToken();
			return token.getTokenValue();
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}
	
	public String syncStartEnvironment() throws Exception {
    System.out.println("Access Token:" + getAccessToken());
    
    System.out.println("GOOGLE_APPLICATION_CREDENTIALS:" + System.getProperty("GOOGLE_APPLICATION_CREDENTIALS",
    ""));
    
    // grpc -> rest api
    CloudShellServiceSettings cloudShellServiceSettings = CloudShellServiceSettings.newHttpJsonBuilder().build();
     
    try (CloudShellServiceClient cloudShellServiceClient =
    CloudShellServiceClient.create(cloudShellServiceSettings)) {
      StartEnvironmentRequest request =
          StartEnvironmentRequest.newBuilder()
              .setName("users/me/environments/default")
              .setAccessToken(getAccessToken())
              .addAllPublicKeys(Arrays.asList("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCZN0WXrusm7GaovfTbouk47l0yzCcmzy7Y13gsAsPhNNEoLcjIgf1t9EM7xoSpnWJYsTPtvAL/8mL9mdHCPmHc+XO5kwJsTema0Wt6DO0V5YHL1r5okdmLmn21IJd/d5H6o5NEjDhg4NxY+5Sjnai2npwRJnmuY+i/DfapEwhn5iW8xBkRCDCS01Qi+DQ6hpOkUyGyoAy3YBU0C5NtcYyn5RBvHiJzvzUMuk27zB7/fG8RJbz1Df/zJlONHIKCvJYsEzcfMSjxA9xEJ1DiR8VpGQ9IpMMXymyWDNPDJnS72bzNeeg8sh8AgwdASRTR65U/xQ0l4N0thDJVgYIbQhsbeB9Wm4nyeo8OY0jfCseF5u249wSUKWlWSJ8OiddxPwHQdFzCN/rPvAPVo97EBKt0WD2Kr3PJuQ8C/rO2DyL4zfh/peCi2cWLz3eGktnExBlLHJ29L7wKAl+laAWQYE7AZWNIw+u7H3jEy9DiBLzojw4GBeGsjMFAXagpXz42BeU="))
              .build();
      StartEnvironmentResponse response =
          cloudShellServiceClient.startEnvironmentAsync(request).get();
      System.out.println("response:" + response.toString());
      
      if (!response.hasEnvironment()) {
        return "could not find environment.";
      }
      
      Environment environment = response.getEnvironment();
      String sshUsername = environment.getSshUsername();
      String sshHost = environment.getSshHost();
      int sshPort = environment.getSshPort();
      
      String sshCommand = String.format("/usr/bin/ssh -t -p %d -i /home/termux/.ssh/google_compute_engine -o StrictHostKeyChecking=no %s@%s -- DEVSHELL_PROJECT_ID=nieuwmijnleven 'bash -l'", sshPort, sshUsername,
      sshHost);
      
      return sshCommand;
    }
  }
	

    public static void main(String[] args) {
        try {
            System.out.println(new App().syncStartEnvironment());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
